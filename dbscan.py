# -*- coding: utf-8 -*-
"""DBSCAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UOcV2-vKBjMlJ3WblqFYqLxV_ybc_7E1
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
import plotly.express as px
# %matplotlib inline

url = "https://raw.githubusercontent.com/SteffiPeTaffy/machineLearningAZ/master/Machine%20Learning%20A-Z%20Template%20Folder/Part%204%20-%20Clustering/Section%2025%20-%20Hierarchical%20Clustering/Mall_Customers.csv"
cust_data = pd.read_csv(url)

cust_data

print("Total data yang kosong:")
print(cust_data.isna().sum())

cust_data.info()

cust_data.rename(columns={'Genre':'Gender','Annual Income (k$)':'Income','Spending Score (1-100)':'SpendScore'},inplace=True)

cust_data.info()

cust_data.describe()

sns.pairplot(cust_data)

x = cust_data.iloc[:, [3, 4]]

x

sns.pairplot(x)

plt.figure(figsize=(15,10))
plt.scatter(x['Income'], x['SpendScore'], s = 60)
plt.xlabel("Income")
plt.ylabel("SpendScore")
plt.show()

from sklearn.cluster import DBSCAN
from sklearn.metrics import silhouette_score

klustering = DBSCAN(eps = 8, min_samples = 3, metric='euclidean')

klustering = klustering.fit(x)

kluster = x.copy()
kluster.loc[:, "Cluster"] = klustering.labels_

kluster

n_kluster = pd.unique(kluster.loc[:,'Cluster'])
jumlah_cluster = len(n_kluster) - (1 if -1 in klustering.labels_ else 0)
print("Jumlah cluster:", jumlah_cluster)

size = kluster.groupby('Cluster').size()
size

outlier = kluster[kluster['Cluster'] == -1]

plt.figure(figsize=(15,10))
sns.scatterplot(x = 'Income', y = 'SpendScore', data = kluster[kluster['Cluster'] != -1], hue = 'Cluster', palette = 'tab10', legend = 'full', s=100, style = 'Cluster')
plt.scatter(outlier['Income'], outlier['SpendScore'], c = 'black', s=100, label = "outlier", marker = '1')
plt.legend(prop={'size': 15})
plt.title("Hasil Pengelompokkan")
plt.show()

kluster["Cluster"] = kluster["Cluster"].astype("str")

px.scatter(data_frame=kluster, x="Income", y="SpendScore", color="Cluster", template='plotly_dark')

label_1 = klustering.labels_
params = klustering.get_params()
print("Dengan parameter")
print("eps\t\t\t\t:", params["eps"])
print("min_samples\t\t\t:", params["min_samples"])
print("Nilai silhoutte yang didapatkan\t:", silhouette_score(x, label_1))

"""# Mencari eps dan minPts terbaik"""

ls_eps = np.arange(8, 15.25, 0.25)
ls_min_samples = np.arange(3, 11)
dbscan_params = [(x, y) for x in ls_eps for y in ls_min_samples]

dbscan_params

jumlah_cluster = []
sil_score = []

for params in dbscan_params:
    clustering = DBSCAN(eps = params[0], min_samples = params[1], metric='euclidean')
    clustering = clustering.fit(x)
    label = clustering.labels_
    jumlah_cluster.append(len(np.unique(label)) - (1 if -1 in label else 0))
    if len(np.unique(label)) == 1:
      sil_score.append(-1)
    else:
      sil_score.append(silhouette_score(x, label))

df_cluster = pd.DataFrame.from_records(dbscan_params, columns =['eps', 'sample_min'])   
df_cluster['jumlah_cluster'] = jumlah_cluster
df_cluster['sil_score'] = sil_score

heatmap_cluster = pd.pivot_table(df_cluster, values='jumlah_cluster', index='sample_min', columns='eps')

plt.figure(figsize = (20, 6))
sns.heatmap(heatmap_cluster, annot=True, cmap="YlGnBu")
plt.title('Jumlah cluster')
plt.show()

heatmap_silscore = pd.pivot_table(df_cluster, values='sil_score', index='sample_min', columns='eps')
plt.figure(figsize = (30, 6))
sns.heatmap(heatmap_silscore, annot=True, cmap="YlGnBu")
plt.title('Sil Score')
plt.show()

df_cluster['sil_score'].describe()

silscore_max_idx = df_cluster['sil_score'].idxmax()
best_series = df_cluster.iloc[silscore_max_idx]
best_eps = best_series['eps']
best_sampleMin = best_series['sample_min']

best_eps, best_sampleMin

dbscan_clustering = DBSCAN(eps=best_eps, min_samples=best_sampleMin, metric='euclidean').fit(x)

dbscan_clustered = x.copy()
dbscan_clustered.loc[:,'Cluster'] = dbscan_clustering.labels_

dbscan_clustered

cluster = pd.unique(dbscan_clustered.loc[:,'Cluster'])
jml_cluster = len(cluster) - (1 if -1 in dbscan_clustering.labels_ else 0)
print("Jumlah cluster:", jml_cluster)

clust_size = dbscan_clustered.groupby('Cluster').size()
clust_size

noise = dbscan_clustered[dbscan_clustered['Cluster'] == -1]

plt.figure(figsize=(15,10))
sns.scatterplot(x = 'Income', y = 'SpendScore', data = dbscan_clustered[dbscan_clustered['Cluster'] != -1], hue = 'Cluster', palette = 'tab10', legend = 'full', s=100, style = 'Cluster')
plt.scatter(noise['Income'], noise['SpendScore'], c = 'black', s=100, label = "noise", marker = '1')
plt.legend(prop={'size': 15})
plt.title("Hasil Pengelompokkan")
plt.show()

dbscan_clustered["Cluster"] = dbscan_clustered["Cluster"].astype("str")

px.scatter(data_frame=dbscan_clustered, x="Income", y="SpendScore", color="Cluster", template='plotly_dark')

# exd = 1 if (jml_cluster % 3) >= 1 else 0
# n, m = (jml_cluster // 3) + exd, 3
# fig = plt.figure(figsize=(30, 30))
# for i in range(jml_cluster):
#   clus = cluster[i]
#   data = dbscan_clustered[dbscan_clustered['Cluster'] == str(clus)]
#   sub = fig.add_subplot(n, m, i+1)
#   sub.scatter(data['Income'], data['SpendScore'], c = [sns.color_palette("tab10")[i]])
#   sub.set_title("Cluster " + str(clus))
# plt.show()

"""# Menggunakan 3 kolom data"""

y = cust_data.iloc[:, [2, 3, 4]]

y

y_ls_eps = np.arange(8, 15.25, 0.25)
y_ls_min_samples = np.arange(3, 11)
y_dbscan_params = [(x, y) for x in y_ls_eps for y in y_ls_min_samples]

y_jumlah_cluster = []
y_sil_score = []

for params in y_dbscan_params:
    y_clustering = DBSCAN(eps = params[0], min_samples = params[1], metric='euclidean')
    y_clustering = y_clustering.fit(y)
    y_label = y_clustering.labels_
    y_jumlah_cluster.append(len(np.unique(y_label)) - (1 if -1 in y_label else 0))
    if len(np.unique(y_label)) == 1:
      y_sil_score.append(-1)
    else:
      y_sil_score.append(silhouette_score(x, y_label))

y_df_cluster = pd.DataFrame.from_records(y_dbscan_params, columns =['eps', 'sample_min'])   
y_df_cluster['jumlah_cluster'] = y_jumlah_cluster
y_df_cluster['sil_score'] = y_sil_score

y_heatmap_cluster = pd.pivot_table(y_df_cluster, values='jumlah_cluster', index='sample_min', columns='eps')

plt.figure(figsize = (20, 6))
sns.heatmap(y_heatmap_cluster, annot=True, cmap="YlGnBu")
plt.title('Jumlah cluster')
plt.show()

y_heatmap_silscore = pd.pivot_table(y_df_cluster, values='sil_score', index='sample_min', columns='eps')
plt.figure(figsize = (30, 6))
sns.heatmap(y_heatmap_silscore, annot=True, cmap="YlGnBu")
plt.title('Sil Score')
plt.show()

y_df_cluster['sil_score'].describe()

y_silscore_max_idx = y_df_cluster['sil_score'].idxmax()
y_best_series = y_df_cluster.iloc[y_silscore_max_idx]
y_best_eps = y_best_series['eps']
y_best_sampleMin = y_best_series['sample_min']

y_best_eps, y_best_sampleMin

y_clustering = DBSCAN(eps=y_best_eps, min_samples=y_best_sampleMin, metric='euclidean').fit(y)

y_clustered = y.copy()
y_clustered.loc[:,'Cluster'] = y_clustering.labels_

y_cluster = pd.unique(y_clustered.loc[:,'Cluster'])
y_jml_cluster = len(y_cluster) - (1 if -1 in y_clustering.labels_ else 0)
print("Jumlah cluster:", y_jml_cluster)

y_clust_size = y_clustered.groupby('Cluster').size()
y_clust_size

import plotly.express as px
# %matplotlib notebook

y_clustered

y_clustered["Cluster"] = y_clustered["Cluster"].astype("str")

px.scatter_3d(data_frame=y_clustered, x='Income', y='SpendScore', z='Age', color = 'Cluster')

